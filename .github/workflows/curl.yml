name: curl-CMake

on: [push]

env:
  BUILD_TYPE: RelWithDebInfo

jobs:
  cmake_macos:
    name: ${{matrix.os}}_${{matrix.arch}}_${{matrix.compiler.CC}}_${{matrix.opt}}_${{matrix.build.name}}
    runs-on: ${{matrix.os}}
    env:
      DEVELOPER_DIR: /Applications/Xcode_14.0.1.app/Contents/Developer
    strategy:
      fail-fast: false
      matrix:
        os: [macos-12]
        arch: [x86_64]
        opt: [O2]
        compiler:
        - CC: clang
          CXX: clang++
          CFLAGS: "-mmacosx-version-min=10.15 -Wno-deprecated-declarations -g"
        - CC: gcc-11
          CXX: g++-11
          CFLAGS: "-mmacosx-version-min=10.15 -Wno-error=undef -Wno-error=conversion -g"
        build:
        - name: OpenSSL
          install: nghttp2 openssl
          generate: -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl -DCURL_DISABLE_LDAP=ON -DCURL_DISABLE_LDAPS=ON
        - name: libssh2
          install: nghttp2 openssl libssh2
          generate: -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl -DCURL_USE_LIBSSH2=ON
    steps:
    - uses: lukka/get-cmake@latest

    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        repository: curl/curl

    - run: |
        cmake -S. -Bbuild -GNinja -DPICKY_COMPILER=OFF ${{matrix.build.generate}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        sed -i -e '/CMAKE_C_FLAGS/s/O[0123sd]/${{matrix.opt}}/' build/CMakeCache.txt
      name: 'cmake generate'
      env: ${{matrix.compiler}}

    - run: cmake --build build --verbose
      name: 'cmake build'

    - name: Save debug info
      if: runner.os == 'macOS'
      working-directory: build
      run: |
        dsymutil --flat lib/libcurl.dylib
        dsymutil lib/libcurl.dylib
        dsymutil --flat src/curl
        dsymutil src/curl

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{matrix.os}}_${{matrix.arch}}_${{ matrix.compiler.CC}}_${{matrix.opt}}_${{matrix.build.name}}
        path: |
          build/**/libcurl*.dylib
          build/**/libcurl.dylib.dSYM
          build/**/libcurl.dylib.dwarf
        retention-days: 2

  cmake_linux:
    name: ${{ format('{0}_{1}_{2}_{3}_{4}', matrix.os, matrix.arch, matrix.compiler.CC, matrix.opt, matrix.build.name) }}
    runs-on: ${{matrix.os}}
    env: ${{matrix.compiler}}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04]
        arch: [x86_64]
        opt: [O1, O2]
        compiler:
        - CC: clang
          CXX: clang++
          CFLAGS: "-Wno-deprecated-declarations -g"
        - CC: gcc-11
          CXX: g++-11
          CFLAGS: "-Wno-error=undef -Wno-error=conversion -g"
        build:
        - name: OpenSSL
          install_ubuntu: libssl-dev
          generate: -DCURL_DISABLE_LDAP=ON -DCURL_DISABLE_LDAPS=ON
        - name: libssh2
          install_ubuntu: libssl-dev libssh2-1-dev zlib1g-dev libnghttp2-dev
          generate: -DCURL_USE_LIBSSH2=ON
    steps:
    - uses: lukka/get-cmake@latest

    - name: 'install prereqs'
      if: runner.os == 'Linux'
      run: |
        sudo apt-get install -y ${{ matrix.build.install_ubuntu }}

    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        repository: curl/curl

    - run: |
        cmake --version
        cmake -S. -Bbuild -GNinja -DPICKY_COMPILER=OFF -DCMAKE_INSTALL_PREFIX=./install ${{matrix.build.generate}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        sed -i -e '/CMAKE_C_FLAGS/s/O[0123sd]/${{matrix.opt}}/' build/CMakeCache.txt
        grep CMAKE_C_FLAGS build/CMakeCache.txt
      name: 'cmake generate'

    - run: cmake --build build --verbose
      name: 'cmake build'

    - run: cmake --install build --verbose
      name: 'cmake install'

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{matrix.os}}_${{matrix.arch}}_${{ matrix.compiler.CC}}_${{matrix.opt}}_${{matrix.build.name}}
        path: |
          build/lib/libcurl.so
          build/src/curl
        retention-days: 2

  cmake_windows:
    name: ${{ format('{0}_{1}_{2}_{3}_{4}', matrix.os, matrix.arch, matrix.compiler.CC, matrix.opt, matrix.build.name) }}
    runs-on: ${{matrix.os}}
    env: ${{matrix.compiler}}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2022]
        arch: [x86_64]
        opt: [O1]
        compiler:
        - CC: cl
          CXX: cl
        - CC: gcc
          CXX: g++
          CFLAGS: "-Wno-error=undef -Wno-error=conversion -g"
        build:
        - name: schannel
          generate: -DCURL_DISABLE_LDAP=ON -DCURL_DISABLE_LDAPS=ON -DCURL_USE_SCHANNEL=ON
        - name: libssh2
          generate: -DCURL_USE_LIBSSH2=ON -DZLIB_ROOT=install -DOPENSSL_ROOT_DIR=install -DCURL_USE_OPENSSL
    steps:
    - uses: lukka/get-cmake@latest

    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        repository: curl/curl

    - name: Setup MSVC-CMD (Windows)
      uses: ilammy/msvc-dev-cmd@v1
      if: runner.os == 'Windows'
      with:
        arch: ${{ matrix.arch || 'x64' }}
        vsversion: '2022'

    - name: Restore cache files (zlib)
      id: cache-zlib-restore
      uses: actions/cache/restore@v3
      with:
        path: install
        key: zlib_${{matrix.os}}_${{matrix.arch}}_${{matrix.compiler.CC}}_${{matrix.opt}}

    - name: Restore cache files (openssl)
      id: cache-openssl-restore
      uses: actions/cache/restore@v3
      with:
        path: install
        key: openssl_${{matrix.os}}_${{matrix.arch}}_${{matrix.compiler.CC}}_${{matrix.opt}}

    - run: |
        cmake --version
        cmake -S. -Bbuild -GNinja -DPICKY_COMPILER=OFF -DCMAKE_INSTALL_PREFIX=install ${{matrix.build.generate}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        sed -i -e '/CMAKE_C_FLAGS/s/O[0123sd]/${{matrix.opt}}/' build/CMakeCache.txt
      name: 'cmake generate'

    - run: cmake --build build --verbose
      name: 'cmake build'

    - run: cmake --install build --verbose
      name: 'cmake install'

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{matrix.os}}_${{matrix.arch}}_${{ matrix.compiler.CC}}_${{matrix.opt}}_${{matrix.build.name}}
        path: |
          build/**/libcurl.dll
          build/**/libcurl.pdb
          build/**/curl.exe
          build/**/curl.pdb
        retention-days: 2

  combine:
    name: Combine artifacts
    needs: [cmake_linux, cmake_macos, cmake_windows]
    runs-on: ubuntu-latest
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        path: curl

    - name: Show downloaded files
      run: find curl -type f -ls

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: curl-builds
        path: curl/**
        retention-days: 7

