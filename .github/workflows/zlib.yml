name: zlib-CMake
on: [push]
jobs:
  ci-cmake:
    name: ${{ matrix.os }}_${{ matrix.arch }}_${{ matrix.compiler }}_${{ matrix.opt }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, windows-2022, macos-12]
        compiler: [gcc, clang]
        opt: [O1, O2]
        arch: [x86_64]
        exclude:
          - os: macos-12
            compiler: gcc
        include:
          - os: windows-2022
            compiler: cl
            arch: x86
            opt: O1
            sed: C:\msys64\usr\bin\sed.exe -i

          - os: windows-2022
            compiler: cl
            arch: x86
            opt: O2
            sed: C:\msys64\usr\bin\sed.exe -i

          - os: windows-2022
            compiler: cl
            arch: x86_64
            opt: O1
            sed: C:\msys64\usr\bin\sed.exe -i

          - os: windows-2022
            sed: C:\msys64\usr\bin\sed.exe -i

          - os: macos-12
            sed: sed -i '' -e

          - os: macos-12
            compiler: gcc-11
            arch: x86_64
            opt: O1
            sed: sed -i '' -e

          - os: macos-12
            compiler: gcc-11
            arch: x86_64
            opt: O2
            sed: sed -i '' -e

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        repository: madler/zlib

    - uses: lukka/get-cmake@latest

    - name: Setup MSVC-CMD (Windows)
      uses: ilammy/msvc-dev-cmd@v1
      if: runner.os == 'Windows'
      with:
        arch: ${{ matrix.arch || 'x64' }}
        vsversion: '2022'

    - name: Generate project files
      run: |
        ${{ matrix.compiler }} --version
        cmake -S ${{ matrix.src-dir || '.' }} -B ${{ matrix.build-dir || '.' }} -G Ninja -D CMAKE_BUILD_TYPE=${{ matrix.build-config || 'RelWithDebInfo' }}
        ${{ matrix.sed || 'sed -i' }} '/CMAKE_C_FLAGS/s/O[023sd]/${{ matrix.opt }}/' ${{ matrix.build-dir || '.' }}/CMakeCache.txt
        ninja --version || echo NO NINJA
      env:
        CC: ${{ matrix.compiler }}

    - name: Compile source code
      run: cmake --build ${{ matrix.build-dir || '.' }} --verbose

    - name: Save debug info
      if: runner.os == 'macOS'
      run: |
        dsymutil --flat libz.dylib
        dsymutil libz.dylib

    - name: Run test cases
      run: ctest -C RelWithDebInfo --output-on-failure --max-width 120
      working-directory: ${{ matrix.build-dir || '.' }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.os }}_${{ matrix.arch }}_${{ matrix.compiler }}_${{ matrix.opt }}
        path: |
          **/zlib.dll
          **/zlib.pdb
          **/libz*.dylib
          **/libz.dylib.dSYM
          **/libz.dylib.dwarf
          **/libz.so
          **/libzlib.dll
        retention-days: 2

  combine:
    name: Combine artifacts
    needs: ci-cmake
    runs-on: ubuntu-latest
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with: 
        path: builds

    - name: Show downloaded files
      run: find builds -type f -ls

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: zlib-builds
        path: builds/**
        retention-days: 7

